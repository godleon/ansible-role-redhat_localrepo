---
# tasks file for ansible-role-redhat_localrepo

- name: register to Red Hat Content Delivery Network
  redhat_subscription:
    state: present 
    username: "{{ redhat_localrepo.rhn_username }}" 
    password: "{{ redhat_localrepo.rhn_password }}"
    autosubscribe: "{{ redhat_localrepo.autosubscribe }}"

- shell: "find /etc/pki/rpm-gpg"
  tags:
    - debug

- shell: "subscription-manager repos --list | grep 'Repo ID' | sort"
  register: command_result
  tags:
    - debug

- name: display result of command "subscription-manager repos --list"
  debug:
    var: command_result.stdout_lines
  tags:
    - debug

- name: active repositories for system upgrade & installing web server
  shell: "subscription-manager repos --enable=rhel-7-server-rpms --enable=rhel-server-rhscl-7-eus-rpms"

- name: upgrade all packages
  yum: name=* state=latest
  ignore_errors: yes
  when: ansible_virtualization_type != 'docker'

- name: install packages for building local repository
  yum: 
    name: "{{ item }}"
    state: latest
  with_items:
    - 'bash-completion'
    - 'yum-utils'
    - 'createrepo'
    - 'nginx14'
    - 'libselinux-python'

- name: create director for storing packages
  file:
    path: '{{ redhat_localrepo.web_root_dir }}'
    state: directory
    mode: 0755

- name: disable SELinux
  selinux:
    state: disabled

- name: copy nginx configuration
  template: 
    src: templates/nginx.localrepo.conf.j2
    dest: /opt/rh/nginx14/root/etc/nginx/conf.d/localrepo.conf

- name: restart nginx14-nginx.service
  service: name=nginx14-nginx.service state=restarted

- name: stop firewalld.service
  service: name=firewalld.service state=stopped

- name: copy script for synchronizing packages
  template: 
    src: templates/sync_repo.sh.j2
    dest: /root/sync_repo.sh

- name: check if GPG key for beta exists
  stat:
    path: /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-beta
  register: st
- name: import GPG key for beta repository
  rpm_key:
    state: present
    key: /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-beta
  when: st.stat.exists

- name: add cron job for sync repo
  cron:
    name: "sync repo"
    minute: "{{ redhat_localrepo.daily_sync_minute }}"
    hour: "{{ redhat_localrepo.daily_sync_hour }}"
    job: "bash /root/sync_repo.sh > /tmp/sync_repo.log 2>&1"

- name: test sync repo in TravisCI
  shell: "bash /root/sync_repo.sh"
  when: ansible_virtualization_type == 'docker'

- name: unregister Red Hat Content Delivery Network
  command: '{{ item }}'
  with_items:
    - 'subscription-manager remove --all'
    - 'subscription-manager unregister'
    - 'subscription-manager clean'